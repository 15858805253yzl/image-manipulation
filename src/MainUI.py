# Author: Ali Gunes
# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'MainUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import ctypes
from PyQt5 import QtCore, QtGui, QtWidgets
import qdarktheme
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog

import AboutUI
import PreferencesUI
import Conversion
import Segmentation
import EdgeDetection
import LoadingUI

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1423, 676)
        MainWindow.font()
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.sourceImage_groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.sourceImage_groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.sourceImage_groupBox.setObjectName("sourceImage_groupBox")
        self.sourceImage_groupBox.setSizePolicy(
            QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Ignored, QtWidgets.QSizePolicy.Policy.Ignored))

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/icons/university.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)

        self.gridLayout = QtWidgets.QGridLayout(self.sourceImage_groupBox)
        self.gridLayout.setObjectName("gridLayout")

        self.sourceImageViewer = QtWidgets.QLabel(self.sourceImage_groupBox)
        self.sourceImageViewer.setText("")
        # self.sourceImageViewer.setPixmap(QtGui.QPixmap("../../../../../../horse.png"))
        self.sourceImageViewer.setScaledContents(True)
        self.sourceImageViewer.setAlignment(QtCore.Qt.AlignCenter)
        self.sourceImageViewer.setWordWrap(False)
        self.sourceImageViewer.setObjectName("sourceImageViewer")

        self.gridLayout.addWidget(self.sourceImageViewer, 0, 0, 1, 1)
        self.gridLayout_2.addWidget(self.sourceImage_groupBox, 0, 0, 1, 1)

        self.outputImage_groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.outputImage_groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.outputImage_groupBox.setObjectName("outputImage_groupBox")
        self.outputImage_groupBox.setSizePolicy(
            QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Ignored, QtWidgets.QSizePolicy.Policy.Ignored))

        self.gridLayout_4 = QtWidgets.QGridLayout(self.outputImage_groupBox)
        self.gridLayout_4.setObjectName("gridLayout_4")

        self.outputImageViewer = QtWidgets.QLabel(self.outputImage_groupBox)
        self.outputImageViewer.setText("")
        # self.outputImageViewer.setPixmap(QtGui.QPixmap("../../../../../../coffee.png"))
        self.outputImageViewer.setScaledContents(True)
        self.outputImageViewer.setObjectName("outputImageViewer")

        self.gridLayout_4.addWidget(self.outputImageViewer, 0, 1, 1, 1)
        self.gridLayout_2.addWidget(self.outputImage_groupBox, 0, 1, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1423, 21))
        self.menubar.setObjectName("menubar")

        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")

        self.menuExport_As = QtWidgets.QMenu(self.menu_File)
        self.menuExport_As.setEnabled(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("resources/icons/exportMenu.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuExport_As.setIcon(icon)
        self.menuExport_As.setObjectName("menuExport_As")

        self.menu_Edit = QtWidgets.QMenu(self.menubar)
        self.menu_Edit.setObjectName("menu_Edit")

        self.menuClear = QtWidgets.QMenu(self.menu_Edit)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("resources/icons/clear.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.menuClear.setIcon(icon1)
        self.menuClear.setObjectName("menuClear")

        self.menu_Conversion = QtWidgets.QMenu(self.menubar)
        self.menu_Conversion.setObjectName("menu_Conversion")

        self.menu_Segmentation = QtWidgets.QMenu(self.menubar)
        self.menu_Segmentation.setObjectName("menu_Segmentation")

        self.menu_Edge_Detection = QtWidgets.QMenu(self.menubar)
        self.menu_Edge_Detection.setObjectName("menu_Edge_Detection")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.manipulationDynamicIsland = QtWidgets.QDockWidget(MainWindow)
        self.manipulationDynamicIsland.setMaximumSize(QtCore.QSize(524287, 524287))
        self.manipulationDynamicIsland.setFeatures(
            QtWidgets.QDockWidget.DockWidgetFloatable | QtWidgets.QDockWidget.DockWidgetMovable)
        self.manipulationDynamicIsland.setAllowedAreas(QtCore.Qt.BottomDockWidgetArea | QtCore.Qt.TopDockWidgetArea)
        self.manipulationDynamicIsland.setObjectName("manipulationDynamicIsland")

        self.dynamicIslandContents = QtWidgets.QWidget()
        self.dynamicIslandContents.setObjectName("dynamicIslandContents")

        self.gridLayout_3 = QtWidgets.QGridLayout(self.dynamicIslandContents)
        self.gridLayout_3.setObjectName("gridLayout_3")

        self.splitter = QtWidgets.QSplitter(self.dynamicIslandContents)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")

        self.Conversion_groupBox = QtWidgets.QGroupBox(self.splitter)
        self.Conversion_groupBox.setEnabled(False)

        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Conversion_groupBox.setFont(font)
        self.Conversion_groupBox.setObjectName("Conversion_groupBox")

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.Conversion_groupBox)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        self.rgbToGrayscale_pushButton = QtWidgets.QPushButton(self.Conversion_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.rgbToGrayscale_pushButton.setFont(font)
        self.rgbToGrayscale_pushButton.setObjectName("rgbToGrayscale_pushButton")

        self.horizontalLayout_3.addWidget(self.rgbToGrayscale_pushButton)

        self.rgbToHSV_pushButton = QtWidgets.QPushButton(self.Conversion_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.rgbToHSV_pushButton.setFont(font)
        self.rgbToHSV_pushButton.setObjectName("rgbToHSV_pushButton")

        self.horizontalLayout_3.addWidget(self.rgbToHSV_pushButton)

        self.Segmentation_groupBox = QtWidgets.QGroupBox(self.splitter)
        self.Segmentation_groupBox.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.Segmentation_groupBox.setFont(font)
        self.Segmentation_groupBox.setObjectName("Segmentation_groupBox")

        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.Segmentation_groupBox)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        self.multiOtsu_pushButton = QtWidgets.QPushButton(self.Segmentation_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)  # done here
        self.multiOtsu_pushButton.setFont(font)
        self.multiOtsu_pushButton.setObjectName("multiOtsu_pushButton")

        self.horizontalLayout_4.addWidget(self.multiOtsu_pushButton)

        self.chanVese_pushButton = QtWidgets.QPushButton(self.Segmentation_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.chanVese_pushButton.setFont(font)
        self.chanVese_pushButton.setObjectName("chanVese_pushButton")

        self.horizontalLayout_4.addWidget(self.chanVese_pushButton)

        self.morphological_pushButton = QtWidgets.QPushButton(self.Segmentation_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.morphological_pushButton.setFont(font)
        self.morphological_pushButton.setObjectName("morphological_pushButton")

        self.horizontalLayout_4.addWidget(self.morphological_pushButton)

        self.EdgeDetection_groupBox = QtWidgets.QGroupBox(self.splitter)
        self.EdgeDetection_groupBox.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.EdgeDetection_groupBox.setFont(font)
        self.EdgeDetection_groupBox.setObjectName("EdgeDetection_groupBox")

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.EdgeDetection_groupBox)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")

        self.roberts_pushButton = QtWidgets.QPushButton(self.EdgeDetection_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.roberts_pushButton.setFont(font)
        self.roberts_pushButton.setObjectName("roberts_pushButton")
        self.horizontalLayout_5.addWidget(self.roberts_pushButton)

        self.sobel_pushButton = QtWidgets.QPushButton(self.EdgeDetection_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.sobel_pushButton.setFont(font)
        self.sobel_pushButton.setObjectName("sobel_pushButton")
        self.horizontalLayout_5.addWidget(self.sobel_pushButton)

        self.scharr_pushButton = QtWidgets.QPushButton(self.EdgeDetection_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.scharr_pushButton.setFont(font)
        self.scharr_pushButton.setObjectName("scharr_pushButton")
        self.horizontalLayout_5.addWidget(self.scharr_pushButton)

        self.prewitt_pushButton = QtWidgets.QPushButton(self.EdgeDetection_groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.prewitt_pushButton.setFont(font)
        self.prewitt_pushButton.setObjectName("prewitt_pushButton")
        self.horizontalLayout_5.addWidget(self.prewitt_pushButton)

        self.gridLayout_3.addWidget(self.splitter, 0, 0, 1, 1)

        self.manipulationDynamicIsland.setWidget(self.dynamicIslandContents)

        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.manipulationDynamicIsland)

        self.controlsDynamicIsland = QtWidgets.QDockWidget(MainWindow)
        self.controlsDynamicIsland.setMinimumSize(QtCore.QSize(75, 513))
        self.controlsDynamicIsland.setMaximumSize(QtCore.QSize(524287, 524287))
        self.controlsDynamicIsland.setFeatures(
            QtWidgets.QDockWidget.DockWidgetFloatable | QtWidgets.QDockWidget.DockWidgetMovable)
        self.controlsDynamicIsland.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea | QtCore.Qt.RightDockWidgetArea)
        self.controlsDynamicIsland.setObjectName("controlsDynamicIsland")

        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")

        self.gridLayout_5 = QtWidgets.QGridLayout(self.dockWidgetContents)
        self.gridLayout_5.setObjectName("gridLayout_5")

        self.Source_groupBox = QtWidgets.QGroupBox(self.dockWidgetContents)
        self.Source_groupBox.setObjectName("Source_groupBox")

        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.Source_groupBox)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.openSource_pushButton = QtWidgets.QPushButton(self.Source_groupBox)
        self.openSource_pushButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("resources/icons/openSource.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openSource_pushButton.setIcon(icon2)
        self.openSource_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.openSource_pushButton.setObjectName("openSource_pushButton")
        self.verticalLayout_2.addWidget(self.openSource_pushButton)

        self.exportSource_pushButton = QtWidgets.QPushButton(self.Source_groupBox)
        self.exportSource_pushButton.setEnabled(False)
        self.exportSource_pushButton.setText("")
        self.exportSource_pushButton.setIcon(icon)
        self.exportSource_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.exportSource_pushButton.setObjectName("exportSource_pushButton")
        self.verticalLayout_2.addWidget(self.exportSource_pushButton)

        self.clearSource_pushButton = QtWidgets.QPushButton(self.Source_groupBox)
        self.clearSource_pushButton.setEnabled(False)
        self.clearSource_pushButton.setToolTip("")
        self.clearSource_pushButton.setText("")
        self.clearSource_pushButton.setIcon(icon1)
        self.clearSource_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.clearSource_pushButton.setObjectName("clearSource_pushButton")
        self.verticalLayout_2.addWidget(self.clearSource_pushButton)

        self.gridLayout_5.addWidget(self.Source_groupBox, 0, 0, 1, 1)

        self.Output_groupBox = QtWidgets.QGroupBox(self.dockWidgetContents)
        self.Output_groupBox.setObjectName("Output_groupBox")

        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.Output_groupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")

        self.save_pushButton = QtWidgets.QPushButton(self.Output_groupBox)
        self.save_pushButton.setEnabled(False)
        self.save_pushButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("resources/icons/save.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_pushButton.setIcon(icon3)
        self.save_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.save_pushButton.setObjectName("save_pushButton")
        self.verticalLayout_3.addWidget(self.save_pushButton)

        self.saveAs_pushButton = QtWidgets.QPushButton(self.Output_groupBox)
        self.saveAs_pushButton.setEnabled(False)
        self.saveAs_pushButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("resources/icons/saveAs.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveAs_pushButton.setIcon(icon4)
        self.saveAs_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.saveAs_pushButton.setObjectName("saveAs_pushButton")
        self.verticalLayout_3.addWidget(self.saveAs_pushButton)

        self.exportOutput_pushButton = QtWidgets.QPushButton(self.Output_groupBox)
        self.exportOutput_pushButton.setEnabled(False)
        self.exportOutput_pushButton.setText("")
        self.exportOutput_pushButton.setIcon(icon)
        self.exportOutput_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.exportOutput_pushButton.setObjectName("exportOutput_pushButton")
        self.verticalLayout_3.addWidget(self.exportOutput_pushButton)

        self.gridLayout_5.addWidget(self.Output_groupBox, 1, 0, 1, 1)

        self.Edit_groupBox = QtWidgets.QGroupBox(self.dockWidgetContents)
        self.Edit_groupBox.setObjectName("Edit_groupBox")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.Edit_groupBox)
        self.verticalLayout.setObjectName("verticalLayout")

        self.undoOutput_pushButton = QtWidgets.QPushButton(self.Edit_groupBox)
        self.undoOutput_pushButton.setEnabled(False)
        self.undoOutput_pushButton.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("resources/icons/undoOutput.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.undoOutput_pushButton.setIcon(icon5)
        self.undoOutput_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.undoOutput_pushButton.setObjectName("undoOutput_pushButton")
        self.verticalLayout.addWidget(self.undoOutput_pushButton)

        self.redoOutput_pushButton = QtWidgets.QPushButton(self.Edit_groupBox)
        self.redoOutput_pushButton.setEnabled(False)
        self.redoOutput_pushButton.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("resources/icons/redoOutput.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.redoOutput_pushButton.setIcon(icon6)
        self.redoOutput_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.redoOutput_pushButton.setObjectName("redoOutput_pushButton")
        self.verticalLayout.addWidget(self.redoOutput_pushButton)

        self.clearOutput_pushButton = QtWidgets.QPushButton(self.Edit_groupBox)
        self.clearOutput_pushButton.setEnabled(False)
        self.clearOutput_pushButton.setText("")
        self.clearOutput_pushButton.setIcon(icon1)
        self.clearOutput_pushButton.setIconSize(QtCore.QSize(24, 24))
        self.clearOutput_pushButton.setObjectName("clearOutput_pushButton")
        self.verticalLayout.addWidget(self.clearOutput_pushButton)

        self.gridLayout_5.addWidget(self.Edit_groupBox, 2, 0, 1, 1)

        self.controlsDynamicIsland.setWidget(self.dockWidgetContents)

        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.controlsDynamicIsland)

        self.actionOpen_Source = QtWidgets.QAction(MainWindow)
        self.actionOpen_Source.setIcon(icon2)
        self.actionOpen_Source.setObjectName("actionOpen_Source")

        self.actionSave_Output = QtWidgets.QAction(MainWindow)
        self.actionSave_Output.setEnabled(False)
        self.actionSave_Output.setIcon(icon3)
        self.actionSave_Output.setObjectName("actionSave_Output")
        self.actionSave_Output_As = QtWidgets.QAction(MainWindow)
        self.actionSave_Output_As.setEnabled(False)
        self.actionSave_Output_As.setIcon(icon4)
        self.actionSave_Output_As.setObjectName("actionSave_Output_As")

        self.actionExit = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("resources/icons/exit.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExit.setIcon(icon7)
        self.actionExit.setObjectName("actionExit")

        self.actionPreferences = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("resources/icons/preferences.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPreferences.setIcon(icon8)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionPreferences.triggered.connect(self.preferencesUI)

        self.actionExport_Source = QtWidgets.QAction(MainWindow)
        self.actionExport_Source.setEnabled(False)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("resources/icons/exportSource.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExport_Source.setIcon(icon9)
        self.actionExport_Source.setObjectName("actionExport_Source")

        self.actionExport_Output = QtWidgets.QAction(MainWindow)
        self.actionExport_Output.setEnabled(False)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("resources/icons/exportOutput.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExport_Output.setIcon(icon10)
        self.actionExport_Output.setObjectName("actionExport_Output")

        self.actionClear_Source = QtWidgets.QAction(MainWindow)
        self.actionClear_Source.setEnabled(False)
        self.actionClear_Source.setIcon(icon9)
        self.actionClear_Source.setObjectName("actionClear_Source")

        self.actionClear_Output = QtWidgets.QAction(MainWindow)
        self.actionClear_Output.setEnabled(False)
        self.actionClear_Output.setIcon(icon10)
        self.actionClear_Output.setObjectName("actionClear_Output")

        self.actionUndo_Output = QtWidgets.QAction(MainWindow)
        self.actionUndo_Output.setEnabled(False)
        self.actionUndo_Output.setIcon(icon5)
        self.actionUndo_Output.setObjectName("actionUndo_Output")

        self.actionRedo_Output = QtWidgets.QAction(MainWindow)
        self.actionRedo_Output.setEnabled(False)
        self.actionRedo_Output.setIcon(icon6)
        self.actionRedo_Output.setObjectName("actionRedo_Output")

        self.actionRGB_to_Grayscale = QtWidgets.QAction(MainWindow)
        self.actionRGB_to_Grayscale.setEnabled(False)
        self.actionRGB_to_Grayscale.setObjectName("actionRGB_to_Grayscale")

        self.actionRGB_to_HSV = QtWidgets.QAction(MainWindow)
        self.actionRGB_to_HSV.setEnabled(False)
        self.actionRGB_to_HSV.setObjectName("actionRGB_to_HSV")

        self.actionMulti_Otsu_Thresholding = QtWidgets.QAction(MainWindow)
        self.actionMulti_Otsu_Thresholding.setEnabled(False)
        self.actionMulti_Otsu_Thresholding.setObjectName("actionMulti_Otsu_Thresholding")

        self.actionChan_Vese_Segmentation = QtWidgets.QAction(MainWindow)
        self.actionChan_Vese_Segmentation.setEnabled(False)
        self.actionChan_Vese_Segmentation.setObjectName("actionChan_Vese_Segmentation")

        self.actionMorphological_Snakes = QtWidgets.QAction(MainWindow)
        self.actionMorphological_Snakes.setEnabled(False)
        self.actionMorphological_Snakes.setObjectName("actionMorphological_Snakes")

        self.actionRoberts = QtWidgets.QAction(MainWindow)
        self.actionRoberts.setEnabled(False)
        self.actionRoberts.setObjectName("actionRoberts")

        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setEnabled(False)
        self.actionSobel.setObjectName("actionSobel")

        self.actionScharr = QtWidgets.QAction(MainWindow)
        self.actionScharr.setEnabled(False)
        self.actionScharr.setObjectName("actionScharr")

        self.actionPrewitt = QtWidgets.QAction(MainWindow)
        self.actionPrewitt.setEnabled(False)
        self.actionPrewitt.setObjectName("actionPrewitt")

        self.actionAbout = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("resources/icons/about.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout.setIcon(icon11)
        self.actionAbout.setObjectName("actionAbout")
        self.actionAbout.triggered.connect(self.aboutUI)

        self.menuExport_As.addAction(self.actionExport_Source)
        self.menuExport_As.addAction(self.actionExport_Output)

        self.menu_File.addAction(self.actionOpen_Source)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionSave_Output)
        self.menu_File.addAction(self.actionSave_Output_As)
        self.menu_File.addAction(self.menuExport_As.menuAction())
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionPreferences)
        self.menu_File.addAction(self.actionAbout)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionExit)

        self.menuClear.addAction(self.actionClear_Source)
        self.menuClear.addAction(self.actionClear_Output)

        self.menu_Edit.addAction(self.menuClear.menuAction())
        self.menu_Edit.addSeparator()
        self.menu_Edit.addAction(self.actionUndo_Output)
        self.menu_Edit.addAction(self.actionRedo_Output)

        self.menu_Conversion.addAction(self.actionRGB_to_Grayscale)
        self.menu_Conversion.addAction(self.actionRGB_to_HSV)

        self.menu_Segmentation.addAction(self.actionMulti_Otsu_Thresholding)
        self.menu_Segmentation.addAction(self.actionChan_Vese_Segmentation)
        self.menu_Segmentation.addAction(self.actionMorphological_Snakes)

        self.menu_Edge_Detection.addAction(self.actionRoberts)
        self.menu_Edge_Detection.addAction(self.actionSobel)
        self.menu_Edge_Detection.addAction(self.actionScharr)
        self.menu_Edge_Detection.addAction(self.actionPrewitt)

        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menu_Edit.menuAction())
        self.menubar.addAction(self.menu_Conversion.menuAction())
        self.menubar.addAction(self.menu_Segmentation.menuAction())
        self.menubar.addAction(self.menu_Edge_Detection.menuAction())

        self.retranslateUi(MainWindow)
        self.actionExit.triggered.connect(MainWindow.close)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # region About Window Creation
        self.AboutWindow = QtWidgets.QMainWindow()
        self.about = AboutUI.Ui_AboutWindow()
        self.about.setupUi(self.AboutWindow)
        # endregion

        # region Open Source Events
        self.openSource_pushButton.clicked.connect(self.openSource)
        self.actionOpen_Source.triggered.connect(self.openSource)
        # endregion

        # region Export Source and Export Output Events
        # For source export
        self.exportSource_pushButton.clicked.connect(lambda: self.exportViewers("source"))
        self.actionExport_Source.triggered.connect(lambda: self.exportViewers("source"))

        # For output export
        self.exportOutput_pushButton.clicked.connect(lambda: self.exportViewers("output"))
        self.actionExport_Output.triggered.connect(lambda: self.exportViewers("output"))
        # endregion

        # region Clear Source and Clear Output Events
        # For clear source
        self.clearSource_pushButton.clicked.connect(lambda: self.clearViewers("source"))
        self.actionClear_Source.triggered.connect(lambda: self.clearViewers("source"))

        # For clear output
        self.clearOutput_pushButton.clicked.connect(lambda: self.clearViewers("output"))
        self.actionClear_Output.triggered.connect(lambda: self.clearViewers("output"))
        # endregion

        # region Conversion Events
        # For RGB to Grayscale
        self.rgbToGrayscale_pushButton.clicked.connect(lambda: self.conversion("rgb2gray"))
        self.actionRGB_to_Grayscale.triggered.connect(lambda: self.conversion("rgb2gray"))

        # For RGB to HSV
        self.rgbToHSV_pushButton.clicked.connect(lambda: self.conversion("rgb2hsv"))
        self.actionRGB_to_HSV.triggered.connect(lambda: self.conversion("rgb2hsv"))
        # endregion

        # region Segmentation Events
        # For Multi-Otsu Segmentation
        self.multiOtsu_pushButton.clicked.connect(lambda: self.segmentation("multiOtsu"))
        self.actionMulti_Otsu_Thresholding.triggered.connect(lambda: self.segmentation("multiOtsu"))

        # For Chan-Vese Segmentation
        self.chanVese_pushButton.clicked.connect(lambda: self.segmentation("chanVese"))

        self.actionChan_Vese_Segmentation.triggered.connect(lambda: self.segmentation("chanVese"))

        # For Morphological Snake Segmentation
        self.morphological_pushButton.clicked.connect(lambda: self.segmentation("morphological"))
        self.actionMorphological_Snakes.triggered.connect(lambda: self.segmentation("morphological"))
        # endregion

        # region Edge Detection Events
        # For Roberts Edge Detection
        self.roberts_pushButton.clicked.connect(lambda: self.edgeDetection("roberts"))
        self.actionRoberts.triggered.connect(lambda: self.edgeDetection("roberts"))

        # For Sobel Edge Detection
        self.sobel_pushButton.clicked.connect(lambda: self.edgeDetection("sobel"))
        self.actionSobel.triggered.connect(lambda: self.edgeDetection("sobel"))

        # For Scharr Edge Detection
        self.scharr_pushButton.clicked.connect(lambda: self.edgeDetection("scharr"))
        self.actionScharr.triggered.connect(lambda: self.edgeDetection("scharr"))

        # For Prewitt Edge Detection
        self.prewitt_pushButton.clicked.connect(lambda: self.edgeDetection("prewitt"))
        self.actionPrewitt.triggered.connect(lambda: self.edgeDetection("prewitt"))
        # endregion

        # region Save and Save As Events
        # For Save
        self.save_pushButton.clicked.connect(lambda: self.save("save"))
        self.actionSave_Output.triggered.connect(lambda: self.save("save"))

        # For Save As
        self.saveAs_pushButton.clicked.connect(lambda: self.save("saveAs"))
        self.actionSave_Output_As.triggered.connect(lambda: self.save("saveAs"))
        # endregion



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "OOP2 Lab Final Assignment - Ali Gunes"))

        self.sourceImage_groupBox.setStatusTip(_translate("MainWindow", "Source is presented here"))
        self.sourceImage_groupBox.setTitle(_translate("MainWindow", "Source Image"))

        self.outputImage_groupBox.setStatusTip(_translate("MainWindow", "Output is presented here"))
        self.outputImage_groupBox.setTitle(_translate("MainWindow", "Output Image"))

        self.menu_File.setTitle(_translate("MainWindow", "&File"))

        self.menuExport_As.setStatusTip(_translate("MainWindow", "Choose your export type"))
        self.menuExport_As.setTitle(_translate("MainWindow", "Export As..."))

        self.menu_Edit.setTitle(_translate("MainWindow", "&Edit"))

        self.menuClear.setStatusTip(_translate("MainWindow", "Clear the..."))
        self.menuClear.setTitle(_translate("MainWindow", "Clear"))

        self.menu_Conversion.setTitle(_translate("MainWindow", "&Conversion"))

        self.menu_Segmentation.setTitle(_translate("MainWindow", "&Segmentation"))

        self.menu_Edge_Detection.setTitle(_translate("MainWindow", "Edge &Detection"))

        self.manipulationDynamicIsland.setStatusTip(
            _translate("MainWindow", "A dynamic island containing all the manipulation buttons"))
        self.manipulationDynamicIsland.setWindowTitle(_translate("MainWindow", "Manipulation Island"))

        self.Conversion_groupBox.setTitle(_translate("MainWindow", "Conversion"))

        self.rgbToGrayscale_pushButton.setStatusTip(_translate("MainWindow", "Convert source RGB to Grayscale"))
        self.rgbToGrayscale_pushButton.setText(_translate("MainWindow", "RGB to Grayscale"))

        self.rgbToHSV_pushButton.setStatusTip(_translate("MainWindow", "Convert source RGB to HSV"))
        self.rgbToHSV_pushButton.setText(_translate("MainWindow", "RGB to HSV"))

        self.Segmentation_groupBox.setTitle(_translate("MainWindow", "Segmentation"))

        self.multiOtsu_pushButton.setStatusTip(_translate("MainWindow", "Apply Multi-Otsu Thresholding to source"))
        self.multiOtsu_pushButton.setText(_translate("MainWindow", "Multi-Otsu"))

        self.chanVese_pushButton.setStatusTip(_translate("MainWindow", "Apply Chan-Vese Thresholding to source"))
        self.chanVese_pushButton.setText(_translate("MainWindow", "Chan-Vese"))

        self.morphological_pushButton.setStatusTip(
            _translate("MainWindow", "Apply Morphological Thresholding to source"))
        self.morphological_pushButton.setText(_translate("MainWindow", "Morphological Snakes"))

        self.EdgeDetection_groupBox.setTitle(_translate("MainWindow", "Edge Detection"))

        self.prewitt_pushButton.setStatusTip(_translate("MainWindow", "Apply Prewitt Edge Detection to source"))
        self.prewitt_pushButton.setText(_translate("MainWindow", "Prewitt"))

        self.scharr_pushButton.setStatusTip(_translate("MainWindow", "Apply Scharr Edge Detection to source"))
        self.scharr_pushButton.setText(_translate("MainWindow", "Scharr"))

        self.sobel_pushButton.setStatusTip(_translate("MainWindow", "Apply Sobel Edge Detection to source"))
        self.sobel_pushButton.setText(_translate("MainWindow", "Sobel"))

        self.roberts_pushButton.setStatusTip(_translate("MainWindow", "Apply Roberts Edge Detection to source"))
        self.roberts_pushButton.setText(_translate("MainWindow", "Roberts"))

        self.controlsDynamicIsland.setStatusTip(
            _translate("MainWindow", "A dynamic island containing all the control buttons"))
        self.controlsDynamicIsland.setWindowTitle(_translate("MainWindow", "Controls"))

        self.Source_groupBox.setTitle(_translate("MainWindow", "Source"))

        self.openSource_pushButton.setStatusTip(_translate("MainWindow", "Open a source file"))

        self.exportSource_pushButton.setStatusTip(_translate("MainWindow", "Export the source"))

        self.clearSource_pushButton.setStatusTip(_translate("MainWindow", "Clear the source"))

        self.Output_groupBox.setTitle(_translate("MainWindow", "Output"))

        self.save_pushButton.setStatusTip(
            _translate("MainWindow", "Save the output with the same name and extension in the same folder"))

        self.saveAs_pushButton.setStatusTip(_translate("MainWindow", "Save the output as..."))

        self.exportOutput_pushButton.setStatusTip(_translate("MainWindow", "Export the output"))

        self.Edit_groupBox.setTitle(_translate("MainWindow", "Edit"))

        self.undoOutput_pushButton.setStatusTip(_translate("MainWindow", "Undo the output"))

        self.redoOutput_pushButton.setStatusTip(_translate("MainWindow", "Redo the output"))

        self.clearOutput_pushButton.setStatusTip(_translate("MainWindow", "Clear the output"))

        self.actionOpen_Source.setText(_translate("MainWindow", "Open Source"))
        self.actionOpen_Source.setStatusTip(_translate("MainWindow", "Open a source file"))
        self.actionOpen_Source.setShortcut(_translate("MainWindow", "Ctrl+O"))

        self.actionSave_Output.setText(_translate("MainWindow", "Save Output"))
        self.actionSave_Output.setStatusTip(
            _translate("MainWindow", "Save the output with the same name and extension in the same folder"))
        self.actionSave_Output.setShortcut(_translate("MainWindow", "Ctrl+S"))

        self.actionSave_Output_As.setText(_translate("MainWindow", "Save Output As..."))
        self.actionSave_Output_As.setStatusTip(_translate("MainWindow", "Save the output as..."))
        self.actionSave_Output_As.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))

        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setStatusTip(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+Q"))

        self.actionPreferences.setText(_translate("MainWindow", "Preferences"))
        self.actionPreferences.setStatusTip(_translate("MainWindow", "Open the user preferences"))
        self.actionPreferences.setShortcut(_translate("MainWindow", "Ctrl+Alt+P"))

        self.actionExport_Source.setText(_translate("MainWindow", "Source"))
        self.actionExport_Source.setStatusTip(_translate("MainWindow", "Export the source"))
        self.actionExport_Source.setShortcut(_translate("MainWindow", "Shift+S"))
        self.actionExport_Output.setText(_translate("MainWindow", "Output"))
        self.actionExport_Output.setStatusTip(_translate("MainWindow", "Export the output"))
        self.actionExport_Output.setShortcut(_translate("MainWindow", "Shift+O"))

        self.actionClear_Source.setText(_translate("MainWindow", "Source"))
        self.actionClear_Source.setStatusTip(_translate("MainWindow", "Clear the source"))
        self.actionClear_Source.setShortcut(_translate("MainWindow", "Ctrl+L"))

        self.actionClear_Output.setText(_translate("MainWindow", "Output"))
        self.actionClear_Output.setStatusTip(_translate("MainWindow", "Clear the output"))
        self.actionClear_Output.setShortcut(_translate("MainWindow", "Ctrl+Shift+L"))

        self.actionUndo_Output.setText(_translate("MainWindow", "Undo Output"))
        self.actionUndo_Output.setStatusTip(_translate("MainWindow", "Undo the output"))
        self.actionUndo_Output.setShortcut(_translate("MainWindow", "Ctrl+Shift+Z"))

        self.actionRedo_Output.setText(_translate("MainWindow", "Redo Output"))
        self.actionRedo_Output.setStatusTip(_translate("MainWindow", "Redo the output"))
        self.actionRedo_Output.setShortcut(_translate("MainWindow", "Ctrl+Y"))

        self.actionRGB_to_Grayscale.setText(_translate("MainWindow", "RGB to &Grayscale"))
        self.actionRGB_to_Grayscale.setStatusTip(_translate("MainWindow", "Convert source RGB to Grayscale"))

        self.actionRGB_to_HSV.setText(_translate("MainWindow", "RGB to &HSV"))
        self.actionRGB_to_HSV.setStatusTip(_translate("MainWindow", "Convert source RGB to HSV"))

        self.actionMulti_Otsu_Thresholding.setText(_translate("MainWindow", "&Multi-Otsu Thresholding"))
        self.actionMulti_Otsu_Thresholding.setStatusTip(
            _translate("MainWindow", "Apply Multi-Otsu Thresholding to source"))

        self.actionChan_Vese_Segmentation.setText(_translate("MainWindow", "&Chan-Vese Segmentation"))
        self.actionChan_Vese_Segmentation.setStatusTip(
            _translate("MainWindow", "Apply Chan-Vese Segmentation to source"))

        self.actionMorphological_Snakes.setText(_translate("MainWindow", "M&orphological Snakes"))
        self.actionMorphological_Snakes.setStatusTip(_translate("MainWindow", "Apply Morphological Snakes to source"))

        self.actionRoberts.setText(_translate("MainWindow", "&Roberts"))
        self.actionRoberts.setStatusTip(_translate("MainWindow", "Apply Roberts Edge Detection to source"))

        self.actionSobel.setText(_translate("MainWindow", "&Sobel"))
        self.actionSobel.setStatusTip(_translate("MainWindow", "Apply Sobel Edge Detection to source"))

        self.actionScharr.setText(_translate("MainWindow", "S&charr"))
        self.actionScharr.setStatusTip(_translate("MainWindow", "Apply Scharr Edge Detection to source"))

        self.actionPrewitt.setText(_translate("MainWindow", "&Prewitt"))
        self.actionPrewitt.setStatusTip(_translate("MainWindow", "Apply Prewitt Edge Detection to source"))

        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionAbout.setStatusTip(_translate("MainWindow", "About this program..."))
        self.actionAbout.setShortcut(_translate("MainWindow", "F1"))

    def setEnabledFunctionEvents(self, value: bool):
        # Enable/Disable Conversion Menus and Buttons
        self.actionRGB_to_Grayscale.setEnabled(value)
        self.actionRGB_to_HSV.setEnabled(value)
        self.Conversion_groupBox.setEnabled(value)

        # Enable/Disable Segmentation Menus and Buttons
        self.actionMulti_Otsu_Thresholding.setEnabled(value)
        self.actionChan_Vese_Segmentation.setEnabled(value)
        self.actionMorphological_Snakes.setEnabled(value)
        self.Segmentation_groupBox.setEnabled(value)

        # Enable/Disable Edge Detection Menus and Buttons
        self.actionRoberts.setEnabled(value)
        self.actionSobel.setEnabled(value)
        self.actionScharr.setEnabled(value)
        self.actionPrewitt.setEnabled(value)
        self.EdgeDetection_groupBox.setEnabled(value)

    def setEnabledSaveEvents(self, value: bool):
        self.save_pushButton.setEnabled(value)
        self.actionSave_Output.setEnabled(value)

        self.saveAs_pushButton.setEnabled(value)
        self.actionSave_Output_As.setEnabled(value)

    def setEnabledClearEvents(self, eventType: str, value: bool):
        if eventType == "source":
            self.actionClear_Source.setEnabled(value)
            self.clearSource_pushButton.setEnabled(value)
        elif eventType == "output":
            self.actionClear_Output.setEnabled(value)
            self.clearOutput_pushButton.setEnabled(value)

    def setEnabledExportEvents(self, eventType: str, value: bool):
        if eventType == "source":
            self.actionExport_Source.setEnabled(value)
            self.exportSource_pushButton.setEnabled(value)
        elif eventType == "output":
            self.actionExport_Output.setEnabled(value)
            self.exportOutput_pushButton.setEnabled(value)

    # Open a dialog box with specified extensions and return the path of the selected file
    def openSource(self):
        self.fileName = QFileDialog.getOpenFileName(MainWindow, "Select a Source", "",
                                                    "PNG Files (*.png);;JPG Files (*.jpg)")
        if self.fileName[0] != "":
            self.sourceImageViewer.setPixmap(QPixmap(self.fileName[0]))
            self.sourceImageViewer.setScaledContents(True)

            # Disable Conversion, Segmentation and Edge Detection Menu Actions and Buttons
            self.setEnabledFunctionEvents(True)

            # Enable Export As Source Menu Action and Button
            self.setEnabledExportEvents("source", True)

            # Enable Clear Source Menu Action and Button
            self.setEnabledClearEvents("source", True)

            # Clear the previous output image
            self.clearViewers("output")

    # Open a dialog box to save the source with the opposite of source file's extension (jpg -> png, png -> jpg)
    def exportViewers(self, exportType: str):
        saveFormat = "PNG Files (*.png)" if self.fileName[0][-3::] == "jpg" else "JPG Files (*.jpg)"

        saveName = QFileDialog.getSaveFileName(MainWindow, "Select a Location", "", saveFormat)
        if (saveName[0] != "") and (exportType == "source"):
            self.sourceImageViewer.pixmap().save(saveName[0])
        elif (saveName[0] != "") and (exportType == "output"):
            self.outputImageViewer.pixmap().save(saveName[0])

    # Clear source and output when Clear Source actions are selected, clear output when Clear Output actions are selected
    def clearViewers(self, viewerType: str):
        if viewerType == "source":
            # Clear both the source and output viewer
            self.sourceImageViewer.clear()
            self.outputImageViewer.clear()

            # Disable Clear Source and Output Menu Action and Button
            self.setEnabledClearEvents("source", False)
            self.setEnabledClearEvents("output", False)

            # Disable Export As Source Menu Action and Button
            self.setEnabledExportEvents("source", False)

            # Disable Export As Output Menu Action and Button
            self.setEnabledExportEvents("output", False)

            # Disable Conversion, Segmentation and Edge Detection Menu Actions and Buttons
            self.setEnabledFunctionEvents(False)

            # Disable Save and Save As Menu Actions and Buttons
            self.setEnabledSaveEvents(False)

        elif viewerType == "output":
            self.outputImageViewer.clear()

            # Disable Clear Output Menu Action and Button
            self.setEnabledClearEvents("output", False)

            # Disable Export As Output Menu Action and Button
            self.setEnabledExportEvents("output", False)

            # Disable Save and Save As Menu Actions and Buttons
            self.setEnabledSaveEvents(False)

    # AboutUI actions
    def aboutUI(self):
        # The declarations of aboutUI is contained in the setupUI()
        self.AboutWindow.show()

    # PreferenceUI actions
    def preferencesUI(self):
        self.PreferencesWindow = QtWidgets.QMainWindow()
        self.preferences = PreferencesUI.Ui_PreferencesWindow()
        self.preferences.setupUi(self.PreferencesWindow, MainWindow, self.AboutWindow, self.controlsDynamicIsland,
                                 self.manipulationDynamicIsland)
        self.PreferencesWindow.show()

    # LoadingUI actions
    def loadingUI(self):
        self.LoadingWindow = QtWidgets.QMainWindow()
        self.loading = LoadingUI.Ui_LoadingWindow()
        self.loading.setupUi(self.LoadingWindow)
        self.LoadingWindow.show()


    # Save and Save As actions
    def save(self, saveType: str):
        if saveType == "save":
            # Saves the output with the same name and extension in the same folder
            self.outputImageViewer.pixmap().save(self.fileName[0])
        elif saveType == "saveAs":
            # Saves the output as
            saveName = QFileDialog.getSaveFileName(MainWindow, "Select a Location", "",
                                                   "PNG Files (*.png);;JPG Files (*.jpg)")
            self.outputImageViewer.pixmap().save(saveName[0])

    # Conversion action calls
    def conversion(self, conversionType: str):

        Conversion.RGBConversions((self.fileName[0]), conversionType, self.outputImageViewer)

        # Enable Export As Output Menu Action and Button
        self.setEnabledExportEvents("output", True)

        # Enable Clear Output Menu Action and Button
        self.setEnabledClearEvents("output", True)

        # Enable Save and Save As Menu Actions and Buttons
        self.setEnabledSaveEvents(True)

    # Segmentation action calls
    def segmentation(self, segmentationType: str):
        Segmentation.Segmentation(self.fileName[0], segmentationType, self.outputImageViewer)

        # Enable Export As Output Menu Action and Button
        self.setEnabledExportEvents("output", True)

        # Enable Clear Output Menu Action and Button
        self.setEnabledClearEvents("output", True)

        # Enable Save and Save As Menu Actions and Buttons
        self.setEnabledSaveEvents(True)

    # Edge Detection action calls
    def edgeDetection(self, edgeDetectionType: str):

        EdgeDetection.EdgeDetection(self.fileName[0], edgeDetectionType, self.outputImageViewer)

        # Enable Export As Output Menu Action and Button
        self.setEnabledExportEvents("output", True)

        # # Enable Clear Output Menu Action and Button
        self.setEnabledClearEvents("output", True)

        # Enable Save and Save As Menu Actions and Buttons
        self.setEnabledSaveEvents(True)


if __name__ == "__main__":
    myAppId = 'aligunes.labfinal.manipulator.021'  # arbitrary string
    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myAppId)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    qdarktheme.setup_theme(custom_colors={"primary": "#FCCD60"}, theme="dark")  # default theme
    MainWindow.show()
    sys.exit(app.exec_())

myAppId = 'aligunes.oopii.labfinal.23'  # arbitrary string
ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myAppId)
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
qdarktheme.setup_theme(custom_colors={"primary": "#FCCD60"}, theme="dark")  # default theme
MainWindow.show()
sys.exit(app.exec_())
